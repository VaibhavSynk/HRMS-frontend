{"ast":null,"code":"import { ServiceRequest } from \"../../helper\";\nimport { endPoint } from \"../../helper/rest-api/url-schema\";\nimport { getErrorFromCatch } from \"../../utils\";\nconst apiCallLogin = reqBody => {\n  return new Promise((resolve, reject) => {\n    ServiceRequest.PostApiRequest(endPoint.auth.login, reqBody, \"\").then(res => {\n      if (!res.error) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(err => {\n      reject(getErrorFromCatch(err));\n    });\n  });\n};\nconst apiCallSendOtp = reqBody => {\n  return new Promise((resolve, reject) => {\n    ServiceRequest.PostApiRequest(endPoint.auth.forgotPassword, reqBody, \"\").then(res => {\n      if (!res.error) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(err => {\n      reject(getErrorFromCatch(err));\n    });\n  });\n};\nconst apiVerifyOtp = reqBody => {\n  return new Promise((resolve, reject) => {\n    ServiceRequest.PostApiRequest(endPoint.auth.verifyOtp, reqBody, \"\").then(res => {\n      if (!res.error) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(err => {\n      reject(getErrorFromCatch(err));\n    });\n  });\n};\nconst apiSetPassword = reqBody => {\n  return new Promise((resolve, reject) => {\n    ServiceRequest.PostApiRequest(endPoint.auth.setPassword, reqBody, \"\").then(res => {\n      if (!res.error) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(err => {\n      reject(getErrorFromCatch(err));\n    });\n  });\n};\nconst AuthApi = {\n  apiCallLogin,\n  apiCallSendOtp,\n  apiVerifyOtp,\n  apiSetPassword\n};\nexport { AuthApi };","map":{"version":3,"names":["ServiceRequest","endPoint","getErrorFromCatch","apiCallLogin","reqBody","Promise","resolve","reject","PostApiRequest","auth","login","then","res","error","catch","err","apiCallSendOtp","forgotPassword","apiVerifyOtp","verifyOtp","apiSetPassword","setPassword","AuthApi"],"sources":["/workspaces/HRMS-frontend/src/app/api/auth/index.tsx"],"sourcesContent":["import { ServiceRequest } from \"../../helper\";\nimport { endPoint } from \"../../helper/rest-api/url-schema\";\nimport { getErrorFromCatch } from \"../../utils\"; \n\n\n\nconst apiCallLogin = (reqBody: any) => {\n    return new Promise((resolve,reject) => {\n         ServiceRequest.PostApiRequest(endPoint.auth.login,reqBody,\"\")\n         .then((res: any) => {\n            if(!res.error){\n                resolve(res);\n            }else{\n                reject(res);\n            }\n         })\n         .catch((err:any) => {\n            reject(getErrorFromCatch(err))\n         })\n    })\n}\n\nconst apiCallSendOtp = (reqBody: any) => {\n    return new Promise((resolve,reject) => {\n         ServiceRequest.PostApiRequest(endPoint.auth.forgotPassword,reqBody,\"\")\n         .then((res: any) => {\n            if(!res.error){\n                resolve(res);\n            }else{\n                reject(res);\n            }\n         })\n         .catch((err:any) => {\n            reject(getErrorFromCatch(err))\n         })\n    })\n}\nconst apiVerifyOtp = (reqBody: any) => {\n    return new Promise((resolve, reject) => {\n      ServiceRequest.PostApiRequest(endPoint.auth.verifyOtp, reqBody, \"\")\n        .then((res: any) => {\n          if (!res.error) {\n            resolve(res);\n          } else {\n            reject(res);\n          }\n        })\n        .catch((err: any) => {\n          reject(getErrorFromCatch(err));\n        });\n    });\n  };\n  \n  const apiSetPassword = (reqBody: any) => {\n    return new Promise((resolve, reject) => {\n      ServiceRequest.PostApiRequest(endPoint.auth.setPassword, reqBody, \"\")\n        .then((res: any) => {\n          if (!res.error) {\n            resolve(res);\n          } else {\n            reject(res);\n          }\n        })\n        .catch((err: any) => {\n          reject(getErrorFromCatch(err));\n        });\n    });\n  };\n  const AuthApi = {\n    apiCallLogin,\n    apiCallSendOtp,\n    apiVerifyOtp,\n    apiSetPassword,\n  };\n  \n  export { AuthApi };\n  "],"mappings":"AAAA,SAASA,cAAc,QAAQ,cAAc;AAC7C,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,iBAAiB,QAAQ,aAAa;AAI/C,MAAMC,YAAY,GAAIC,OAAY,IAAK;EACnC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAK;IAClCP,cAAc,CAACQ,cAAc,CAACP,QAAQ,CAACQ,IAAI,CAACC,KAAK,EAACN,OAAO,EAAC,EAAE,CAAC,CAC5DO,IAAI,CAAEC,GAAQ,IAAK;MACjB,IAAG,CAACA,GAAG,CAACC,KAAK,EAAC;QACVP,OAAO,CAACM,GAAG,CAAC;MAChB,CAAC,MAAI;QACDL,MAAM,CAACK,GAAG,CAAC;MACf;IACH,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAO,IAAK;MACjBR,MAAM,CAACL,iBAAiB,CAACa,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC;EACP,CAAC,CAAC;AACN,CAAC;AAED,MAAMC,cAAc,GAAIZ,OAAY,IAAK;EACrC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAK;IAClCP,cAAc,CAACQ,cAAc,CAACP,QAAQ,CAACQ,IAAI,CAACQ,cAAc,EAACb,OAAO,EAAC,EAAE,CAAC,CACrEO,IAAI,CAAEC,GAAQ,IAAK;MACjB,IAAG,CAACA,GAAG,CAACC,KAAK,EAAC;QACVP,OAAO,CAACM,GAAG,CAAC;MAChB,CAAC,MAAI;QACDL,MAAM,CAACK,GAAG,CAAC;MACf;IACH,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAO,IAAK;MACjBR,MAAM,CAACL,iBAAiB,CAACa,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC;EACP,CAAC,CAAC;AACN,CAAC;AACD,MAAMG,YAAY,GAAId,OAAY,IAAK;EACnC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCP,cAAc,CAACQ,cAAc,CAACP,QAAQ,CAACQ,IAAI,CAACU,SAAS,EAAEf,OAAO,EAAE,EAAE,CAAC,CAChEO,IAAI,CAAEC,GAAQ,IAAK;MAClB,IAAI,CAACA,GAAG,CAACC,KAAK,EAAE;QACdP,OAAO,CAACM,GAAG,CAAC;MACd,CAAC,MAAM;QACLL,MAAM,CAACK,GAAG,CAAC;MACb;IACF,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAQ,IAAK;MACnBR,MAAM,CAACL,iBAAiB,CAACa,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC;AAED,MAAMK,cAAc,GAAIhB,OAAY,IAAK;EACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCP,cAAc,CAACQ,cAAc,CAACP,QAAQ,CAACQ,IAAI,CAACY,WAAW,EAAEjB,OAAO,EAAE,EAAE,CAAC,CAClEO,IAAI,CAAEC,GAAQ,IAAK;MAClB,IAAI,CAACA,GAAG,CAACC,KAAK,EAAE;QACdP,OAAO,CAACM,GAAG,CAAC;MACd,CAAC,MAAM;QACLL,MAAM,CAACK,GAAG,CAAC;MACb;IACF,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAQ,IAAK;MACnBR,MAAM,CAACL,iBAAiB,CAACa,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC;AACD,MAAMO,OAAO,GAAG;EACdnB,YAAY;EACZa,cAAc;EACdE,YAAY;EACZE;AACF,CAAC;AAED,SAASE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}