{"version":3,"file":"static/js/11.d81108c9.chunk.js","mappings":"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","sources":["app/components/common/text-input.tsx","app/components/common/spinner.tsx","app/api/auth/index.tsx","app/components/common/alert-box.tsx","app/container/auth/login/index.tsx"],"sourcesContent":["import React from 'react';\nimport { InputGroup } from 'react-bootstrap';\nimport { Eye, EyeSlash } from 'react-bootstrap-icons';\nimport Form from 'react-bootstrap/Form';\nimport { style } from '../../theming/style/style';\n\nexport default function CommonTextInput(props:any) {\n    const { textFieldValue } = props;\n  return (\n    <div>\n      <InputGroup className='mb-1 rounded-3'>\n       <Form.Floating style={{...style.inputFloating}}> \n       <Form.Control\n       className='rounded-3'\n       placeholder={textFieldValue.label}\n        id={textFieldValue.controlId}\n        type={textFieldValue.iconsValue ? 'text' : textFieldValue.inputType}\n        name={textFieldValue.name}\n        value={textFieldValue.value}\n        onChange={textFieldValue.handleChange}\n        isValid={Boolean(textFieldValue.touchedValue && textFieldValue.errorsValue)}\n        isInvalid={textFieldValue.touchedValue && textFieldValue.errorsValue}\n        />\n        <label htmlFor={textFieldValue.controlId}>{textFieldValue.label}</label>\n        \n        <Form.Control.Feedback type='invalid'>{textFieldValue.errorsValue}</Form.Control.Feedback>  \n        \n        </Form.Floating>\n        {textFieldValue.passwordIcon && <InputGroup.Text className='rounded-3 fa-sm' style={{...style.eyeBtn}}>{textFieldValue.iconsValue ? <Eye onClick={textFieldValue.handleShowPassword} /> : <EyeSlash onClick={textFieldValue.handleShowPassword} />}</InputGroup.Text>}\n       \n        </InputGroup>\n\n    </div>\n  )\n}\n","import React from 'react'\nimport { Spinner } from 'react-bootstrap';\n\n\ninterface SpinnerProps {\n    isShow: boolean | false;\n}\n\nexport default function Spinners(props:SpinnerProps) {\n    const { isShow } = props;\n  return (\n    <>\n       {isShow && <Spinner animation='border' style={{color: \"#0e79cd\"}} />} \n    </>\n  )\n}\n","import { ServiceRequest } from \"../../helper\";\nimport { endPoint } from \"../../helper/rest-api/url-schema\";\nimport { getErrorFromCatch } from \"../../utils\"; \n\n\n\nconst apiCallLogin = (reqBody: any) => {\n    return new Promise((resolve,reject) => {\n         ServiceRequest.PostApiRequest(endPoint.auth.login,reqBody,\"\")\n         .then((res: any) => {\n            if(!res.error){\n                resolve(res);\n            }else{\n                reject(res);\n            }\n         })\n         .catch((err:any) => {\n            reject(getErrorFromCatch(err))\n         })\n    })\n}\n\nconst AuthApi =  {\n    apiCallLogin,\n}\n\n\nexport { AuthApi };","import React from 'react'\nimport { Alert } from 'react-bootstrap'\n\ninterface AlertBoxProps {\n    message: string,\n    variant: string\n}\n\nexport default function AlertBox(props: AlertBoxProps) {\n    const { message,variant } = props;\n    return (\n    <>\n     <Alert variant={variant} >{message}</Alert>\n    </>\n)}","import React, { useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { ImagePath } from '../../../assets/images';\nimport { CommonColors, style } from '../../../theming/style/style';\nimport { AppStringUtils } from '../../../utils';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport CommonTextInput from '../../../components/common/text-input';\nimport Spinners from '../../../components/common/spinner';\nimport { Link } from 'react-router-dom';\nimport { AuthApi } from '../../../api/auth';\nimport { useDispatch } from 'react-redux';\nimport { actionLogin } from '../../../store/reducer/login';\nimport { RoutePath } from '../../../routes/route-path';\nimport { useNavigate } from 'react-router';\nimport AlertBox from '../../../components/common/alert-box';\n\n\nexport default function Login() {\n  const t = AppStringUtils();\n\n  const router = useNavigate();\n\n  const validationSchema = yup.object({\n    username: yup\n    .string()\n    .min(3,t.usernameminVal)\n    .max(15,t.usernamemaxVal)\n    .required(t.usernameVal),\n    password: yup\n    .string()\n    .min(8,t.passLengthVal)\n    .required(t.passwordVal)\n  });\n  \n  let copy = new Date().getFullYear();\n\n\n  const dispatch = useDispatch();\n  const [errMessage,setErrMessage] = React.useState(\"\");\n  const [showPassword,setPassword] = React.useState(false);\n  const [progress,setProgress] = React.useState(false);\n\n\n  const handleShowPassword = () => {\n    setPassword(!showPassword);\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values,{resetForm}) => {\n        apiCallLogin(values);\n        resetForm();\n    }\n  });\n\n  const apiCallLogin = (info:any) => {\n     setErrMessage(\"\");\n     setProgress(true);\n     AuthApi.apiCallLogin(info)\n    .then((res:any) => {\n          setProgress(false);\n          dispatch(actionLogin(res.data))\n            router(RoutePath.dashboard,{replace: true});\n     })\n     .catch((err: any) => {\n      setProgress(false);\n      setErrMessage(err)\n     })\n  }\n\n  useEffect(() => {\n     setTimeout(() => {\n       setErrMessage(\"\");\n     },3000);\n  },[errMessage]);\n\n  const textFieldValue = [\n    {\n      controlId: \"floatingInput1\",\n      inputType: \"text\",\n      label: \"Username\",\n      name: \"username\",\n      value: formik.values.username,\n      handleChange: formik.handleChange,\n      touchedValue: formik.touched.username,\n      errorsValue: formik.errors.username\n    },\n    {\n      controlId: 'floatingInput2',\n      inputType: \"password\",\n      label: \"Password\",\n      name: 'password',\n      value: formik.values.password,\n      handleChange: formik.handleChange,\n      touchedValue: formik.touched.password,\n      errorsValue: formik.errors.password,\n      iconsValue: showPassword,\n      passwordIcon: 'basic-addon2',\n      handleShowPassword: handleShowPassword,\n    }\n  ]\n\n  return (\n  <>\n   <div  style={{...style.pageBanner}}>\n    <div  style={{...style.loginContainer}} >\n      <div style={{...style.loginForm}} >\n        <div className='position-fixed top-0'>\n          <img src={ImagePath.synLogo} alt={t.imgAlternative} width='250'   />\n        </div>\n\n        <Container className='text-center p-3 fs-2 fw-bolder' style={{...style.commonColor}}>{t.login}</Container>\n       \n          <form style={{...style.formStyle}} onSubmit={formik.handleSubmit}>\n           \n             \n             {textFieldValue.map((item:any,index) => \n               <CommonTextInput textFieldValue={item} key={index} />\n             )}\n            \n           \n           <Container>{errMessage.length > 0 && <AlertBox message={errMessage} variant='danger' />}</Container>\n\n           <Container className='text-center'>{progress && <Spinners  isShow={progress} />}</Container>\n\n            {!progress && <button type='submit' className='form-control rounded-5 p-2' style={{...style.loginButton}}>Login</button>}\n          </form>\n\n\n          <Container className='text-center mt-3' style={{...CommonColors.firstCommon}}>\n            <Link to={RoutePath.forgotPassword} style={{...style.linkForgot}}>{t.fogotPassText}</Link>\n          </Container>\n\n          <Container className='text-center mt-5'>\n            <Container style={{...style.textColorCommon}}>{t.synText}</Container>\n            <Container style={{...style.textColorCommon}}>{`Copyright © ${copy}`} <span style={{...style.synTech}}>{t.synTech}</span> {t.allRightsText}</Container>\n          </Container>\n  \n        </div>\n\n      <div style={{...style.logoForm,position: \"absolute\"}} >\n        <img src={ImagePath.LogoSVG} alt={t.imgAlternative} />\n      </div>\n    </div>\n   </div>\n  </>\n  )\n}\n\n\n"],"names":["CommonTextInput","props","textFieldValue","InputGroup","className","Form","style","placeholder","label","id","controlId","type","iconsValue","inputType","name","value","onChange","handleChange","isValid","Boolean","touchedValue","errorsValue","isInvalid","htmlFor","passwordIcon","onClick","handleShowPassword","Spinners","isShow","Spinner","animation","color","AuthApi","apiCallLogin","reqBody","Promise","resolve","reject","ServiceRequest","endPoint","then","res","error","catch","err","getErrorFromCatch","AlertBox","message","variant","Alert","Login","t","AppStringUtils","router","useNavigate","validationSchema","yup","username","min","usernameminVal","max","usernamemaxVal","required","usernameVal","password","passLengthVal","passwordVal","copy","Date","getFullYear","dispatch","useDispatch","React","errMessage","setErrMessage","showPassword","setPassword","progress","setProgress","formik","useFormik","initialValues","onSubmit","values","resetForm","info","actionLogin","data","RoutePath","replace","useEffect","setTimeout","touched","errors","src","ImagePath","alt","imgAlternative","width","Container","login","handleSubmit","map","item","index","length","CommonColors","to","fogotPassText","synText","synTech","allRightsText","position"],"sourceRoot":""}