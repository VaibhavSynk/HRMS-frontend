{"ast":null,"code":"import { CreateUrl } from \"./create-url\";\nimport axios from 'axios';\nconst strUrl = endpoint => {\n  return CreateUrl(endpoint);\n};\nconst addTokenInHeader = token => {\n  let tokenHeaders = {};\n  if (token && token !== null && token.length > 0) {\n    tokenHeaders.Authorization = 'token' + token;\n  }\n  return tokenHeaders;\n};\nconst commonAxiosService = (dictInfo, resolve, reject) => {\n  return axios(dictInfo).then(response => {\n    resolve(response.data);\n  }).catch(error => {\n    reject(error);\n  }).then(() => {\n    //always executes\n  });\n};\nconst GetApiRequest = (endpoint, query, token) => {\n  return new Promise((resolve, reject) => {\n    let dictInfo = {\n      method: 'GET',\n      url: strUrl(endpoint),\n      params: query,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    commonAxiosService(dictInfo, resolve, reject);\n  });\n};\n_c = GetApiRequest;\nconst PostApiRequest = (endpoint, param, token) => {\n  return new Promise((resolve, reject) => {\n    // let tokenHeaders: any = addTokenInHeader(token);\n    let dictInfo = {\n      method: 'POST',\n      url: strUrl(endpoint),\n      data: JSON.stringify(param),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    commonAxiosService(dictInfo, resolve, reject);\n  });\n};\n_c2 = PostApiRequest;\nconst PutApiRequest = (endpoint, query, token) => {\n  return new Promise((resolve, reject) => {\n    let dictInfo = {\n      method: 'PUT',\n      url: strUrl(endpoint),\n      params: query,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    commonAxiosService(dictInfo, resolve, reject);\n  });\n};\n_c3 = PutApiRequest;\nconst DeleteApiRequest = (endpoint, query, token) => {\n  return new Promise((resolve, reject) => {\n    let dictInfo = {\n      method: 'DELETE',\n      url: strUrl(endpoint),\n      params: query,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    commonAxiosService(dictInfo, resolve, reject);\n  });\n};\n_c4 = DeleteApiRequest;\nexport const ServiceRequest = {\n  GetApiRequest,\n  PostApiRequest,\n  PutApiRequest,\n  DeleteApiRequest\n};\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GetApiRequest\");\n$RefreshReg$(_c2, \"PostApiRequest\");\n$RefreshReg$(_c3, \"PutApiRequest\");\n$RefreshReg$(_c4, \"DeleteApiRequest\");","map":{"version":3,"names":["CreateUrl","axios","strUrl","endpoint","addTokenInHeader","token","tokenHeaders","length","Authorization","commonAxiosService","dictInfo","resolve","reject","then","response","data","catch","error","GetApiRequest","query","Promise","method","url","params","headers","PostApiRequest","param","JSON","stringify","PutApiRequest","DeleteApiRequest","ServiceRequest"],"sources":["/workspaces/HRMS-frontend/src/app/helper/rest-api/index.tsx"],"sourcesContent":["import { CreateUrl } from \"./create-url\";\nimport axios from 'axios';\n\nconst strUrl = (endpoint:string) => {\n    return CreateUrl(endpoint);\n};\n\n\nconst addTokenInHeader = (token: string) => {\n    let tokenHeaders: any = {};\n    if(token && token !== null && token.length > 0){\n        tokenHeaders.Authorization = 'token' + token;\n    }\n    return tokenHeaders;\n}\n\n\nconst commonAxiosService = (dictInfo: any,resolve:any,reject:any) => {\n    return axios (dictInfo)\n    .then((response) => {\n        resolve(response.data);\n    })\n    .catch((error) => {\n        reject(error);\n    })\n    .then(() => {\n        //always executes\n    });\n}\n\nconst GetApiRequest = (endpoint: string,query: any,token:string) => {\n     return new Promise((resolve,reject) => {\n        let dictInfo = {\n            method: 'GET',\n            url: strUrl(endpoint),\n            params: query,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }\n        };\n        commonAxiosService(dictInfo,resolve,reject);\n     })\n};\n\nconst PostApiRequest = (endpoint: string,param: any,token:string) => {\n    return new Promise((resolve,reject) => {\n        // let tokenHeaders: any = addTokenInHeader(token);\n       let dictInfo = {\n           method: 'POST',\n           url: strUrl(endpoint),\n           data: JSON.stringify(param),\n           headers: { \n               \"Content-Type\": \"application/json\",\n           }\n       };\n       commonAxiosService(dictInfo,resolve,reject);\n    })\n};\n\nconst PutApiRequest = (endpoint: string,query: any,token:string) => {\n    return new Promise((resolve,reject) => {\n       let dictInfo = {\n           method: 'PUT',\n           url: strUrl(endpoint),\n           params: query,\n           headers: {\n               \"Content-Type\": \"application/json\",\n           }\n       };\n       commonAxiosService(dictInfo,resolve,reject);\n    })\n};\nconst DeleteApiRequest = (endpoint: string,query: any,token:string) => {\n    return new Promise((resolve,reject) => {\n       let dictInfo = {\n           method: 'DELETE',\n           url: strUrl(endpoint),\n           params: query,\n           headers: {\n               \"Content-Type\": \"application/json\",\n           }\n       };\n       commonAxiosService(dictInfo,resolve,reject);\n    })\n};\n\n\nexport const ServiceRequest = {\n    GetApiRequest,\n    PostApiRequest,\n    PutApiRequest,\n    DeleteApiRequest\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}